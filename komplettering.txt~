Examinatorns kommentarer:
--------------------------------------------------

En bra början, men det finns en del saker att arbeta på för att få
godkänt (se nedan).  Projektet har dessutom inte ännu nått den
nödvändiga omfattningen, speciellt med tanke på att vissa delar av
koden kan förkortas och förenklas (se nedan).


Korrekta paketnamn saknas.

Namngivning: "brickArrayList" kodar in typen i namnet, vilket man
normalt inte vill göra.  Bara "bricks" borde räcka.

    KOMMENTAR: Ok, fixat i klassen BoardModel rad 15.

Om vi tittar på SquareObstacle.intersects():

        int brickWidth = objectWidth;
  int brickHeight = objectHeight;
  int playerWidth = brickWidth;
    int playerHeight = brickHeight;
    if (playerWidth <= 0 || playerHeight <= 0 || brickWidth <= 0 || brickHeight <= 0) {
      return false;
 }

Detta känns lite onödigt, med tanke på att man får precis samma sak
testad genom dessa tre rader:

 if (objectWidth <= 0 || objectHeight <= 0) {
          return false;
     }

Och varför antas spelarens storlek vara samma som hindrets?

    KOMMENTAR: Vi har ändrat if satsen som du förslog ovan. Nu skickar vi med spelarens storlek till metoden intersects, metoden finns i klassen Obstacle rad 38.

Sedan har ni:

 playerWidth += playerPositionX;
       playerHeight += playerPositionY;
    brickWidth += objectX;
   brickHeight += objectY;
 if ((playerWidth >= objectX && !(playerPositionX > brickWidth)) &&
            (playerHeight > objectY && !(playerPositionY > brickHeight))) {
     return true;
 }

Detta ändrar spelarens och brickans storlek.  Varför vill man ändra
deras storlek?  (Om det inte är det ni menar, är det *här* ni behöver
införa nya variabler med namn som motsvarar det ni har tänkt er, t.ex
spelarens högra kant och så vidare.)

    KOMMENTAR: Här har vi ändrat variabelnamnen till playerRightSide och playerBottomSide som mer bättre reflekterare dess användning, metoden finns i klassen Obstacle rad 38

Notera också att OvalObstacle och SquareObstacle har exakt samma
metodimplementation utom några namn.  Det ger er en utmärkt chans att
bryta ut detta till en gemensam implementation.

    KOMMENTAR: Här flyttade vi in metoden till Obstacle klassen istället så alla typer av object har samma intersect metod, metoden finns i klassen Obstacle rad 38

Varje obstacle har en "rectangle" som verkar ange dess storlek.
Kanske vore bättre att kalla den "size"?

    KOMMENTAR: Det är fixat och passar in bättre, metoden finns i klassen Obstacle rad 13.

När man tittar vidare ser man att det finns en klass Obstacle som
innehåller ett GameObstacle.  Här blir tankegången svår för en
utomstående att förstå: Varför innehåller ett hinder ett annat hinder?
Det verkar för mig som att de olika hindertyperna skulle vara
subklasser till Obstacle istället.  Som det är nu är OvalObstacle inte
ett hinder (som namnet anger) utan en sorts
"kollisionsdetektor/ritare".  Det ger också t.ex. problemet att man
måste skicka med info till kollisionsdetektorn och draw() som de
metoderna redan skulle känna till om OvalObstacle var en subklass till
Obstacle.

Jag ser att ni använder detta som Strategy-mönster.  Detta mönster ser
jag egentligen inget behov av här, men det är förståeligt att ni vill
få in något sådant i projektet.  Det ni kan göra i så fall är att döpa
om GameObstacle och relaterade klasser till något i stil med
ObstacleShape så blir det mer förståeligt att man har ett hinder och
dess form.

    KOMMENTAR: Vi har döpt om GameObstacle till ObstacleShape, så vi använder fortfarande strategy möntstret fast nu enbart med metoden draw, eftersom  vi flyttade intersect metoden till Obstacle klassen. Klasserna som implementerar OsbtacleShape har döpts om till TriangleShape, OvalShape, SquareShape för att passa in i förändringen.

Nästa kodsnutt:

    if (obstacle.runIntersect(nextPlayerX, nextPlayerY, obstacle.getPositionX(), obstacle.getPositionY(),
                                  obstacle.getSize().width, obstacle.getSize().height)) return true;

Men ett hinder vet ju redan sin storlek och position, så det skulle
vara bättre att helt enkelt göra

     if (obstacle.runIntersect(nextPlayerX, nextPlayerY)) return true;

och låta runIntersect() ta fram de värden som behövs.  Och motsvarande
för runDraw().

    KOMMENTAR: Här har vi gjort precis som du beskrivit och vi har lagt till spelaren storlek eftersom vi inte antar att spelaren storlek är samma som varje hinder. Därmed ser det ut så här nu  "obstacle.intersect(nextPlayerX, nextPlayerY, playerWidth, playerHeight)"

Jag skulle också föredra att kalla metoderna draw() och intersect()
istället för run...().  Anledningen är att vi inte behöver avslöja för
utomstående att Obstacle skickar vidare sina anrop någon annanstans.
Den ska rita eller kolla intersektionen, punkt slut.  Utifrån sett är
allt annat en implementationsdetalj.

    KOMMENTAR: Ok smart, fixat i klassen Obstacle rad 38 samt rad 57.

    public boolean collide(int nextPlayerPositionY, int
  nextPlayerPositionX) { ... }

Namngivning: Denna metod heter "kollidera!".  Borde heta
"collidesWith()", "willCollide()", eller något liknande.

    KOMMENTAR: Metoden ifråga heter nu collidesWith() i klassen BoardController rad 43.

Följande kod:

       int[] polygonX;
   int[] polygonY;
       int n;

    polygonX = new int[3];
     polygonY = new int[3];

      n = polygonX.length;

       polygonX[0] = x;
    polygonY[0] = y + height;
    polygonX[1] = x + width / 2;
     polygonY[1] = y;
  polygonX[2] = x + width;
   polygonY[2] = y + height;


...kan och bör också skrivas så här:

       int[] polygonX = { x, x + width / 2, x + width };
       int[] polygonY = { y, y + height, y + height };
       int i = polygonX.length;

Detta sparar kod och blir mer lättläst.

    KOMMENTAR: Ok, fixat enl ovan i klassen TriangleShape rad 14.

Övriga kommentarer (av assistent)
--------------------------------------------------

Project name: Super Impossible Game

Summary, fulfilling requirements:
Design patterns (1/2/3): 3, MVC, Observer, Strategy
Object orientation (1/2/3): 3
Design decisions (2/5/8): 8
UML (1/2/4): 4
Grade ambition: 5
